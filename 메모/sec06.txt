6. 배열(Array) 생성과 사용하기
자바스크립트는 데이터가 객체로 되어있다. 이 데이터들(객체들)을 목록으로담는것이 Array이다.
다른 언어에서의 Collection의 개념이다.
Array는 다양하게 사용할 수있다.

6.1 push / pop메소드를 이용한 데이터 관리 Stack
var nums = new Array();
nums.push(5) -> var n1 = nums.pop()
하나씩 적재해서 나중에 넣은 값을 가장 먼저 꺼내줌. 또다시 pop하면 처음 나온값은 사라지고 이전에 햇던 것이 뽑아짐.

6.2 인델스를 이용한 데이터 관리 List
가장 배열과 비슷한 형태임.
var nums = new Array();
nums[0] = 5; 값을 꺼내도 남아있음.
nums[3] = 5; 할 수잇다. 0번째부터 안넣어도됨. 앞의 0,1,2 가 값을 참조하지 않고 비어있는 공간이 만들어짐.

console.log(nums);으로 출력 가능한데 console이 없어니 개발자 도구에 출력됨.
사진참조

꼭 2가지 나눠쓰는게 아니라 유연하게 사용하면 된다.

7. 배열(Array) 초기화와 조작하기
7.1 배열 초기화
var nums = new Array();
var nums = new Array(5);
숫자를 넣으면 숫자가 하나면 5개의 비어있는 공간을 가지게 됨
참조변수 5개를 만드는 것과 같다
var nums = new Array(5, 10 ,21);
이것은 배열이 처음만들어질때 초기값으로 인식하고 만들어줌.
var nums = new Array(5, 10 , 21 , "hello");
어떤 데이터든 받아들일 수 있어서 어떤 형태인지 그래서 확인이 필요하다.
alert(typeof nums[3]);
var nums = new Array(5,10,21,"hello", new Array(2,3,4));
배열안에 배열을 넣을 수도 잇다. 
alert(nums[4][1]); -> 이차원 배열꺼내오듯이 꺼내오면 됨.

7.2 splice()메소드를 이용한 데이터관리 List
nums.splice(1); 1번째 이후가 다 지워짐
nums.splice(1, 1); 1번째위치에서 1개를 지워라 
nums.splice(길이, 갯수);
nums.splice(2,1,"hoho"); 2번째에서 1개를 지우고 세번째 인자를 꽃아넣어라 된다.
중간에 삽입하고 싶다?
nums.splice(2,0,"hoho"); 2번째에서 0개를 지우고 꽃아 넣기라 중간에 들어가게 됨.
splice는 데이터를 삭제, 대체가능하게 만들어주는 메소드인 것이다.

8. Object 객체
Object는 다른언어에서도 객체지향이면 가지고 있음 class를 정의하고 객체를 만들때 사용한다.
JavaScript는 prototype와 class로 나뉘고 객체를 만들고 정의한다. prototype자바스크립트 객체 지향부분에서 보면된다.
자바스크립트는 맨땅에 객체를 만들고 필요한 속성을 덕지덕지 붙인다. 동적인 객체 정의이다.
기존언어는 정적인 객체 정의이다.

var exam = new Object();
exam.kor = 30;
exam.eng = 70;
exam.math = 80;
하면 Exapnd Objext라고 하며 이것을 꺼내서 연산을 할 수 있다.

var exam = new Object();
exam.kor = 30;
exam.eng = 70;
exam.math = 80;

exam.Kor = 20;
console.log(exam.kor + exam.eng);
이면 중간에 값이 바뀌느냐? Kor대문자로 작성해서 당연히 안됨. 이렇게 너무 유연해서 사용할때 주의를 잘해야함!!
언어적으로는 표준을 잡기 힘들고 컴파일에러나 같은 곳에서 오류가 나는데 오류를 잡기가 너무 어렵다.
가능하면 타임스크립트를 사용하면 보완장치로 컴파일하면서 트랜스파일러 등 기능을 하는 것이 있다.
기업형이 아니고 혼자 공부할때는 그냥 자바스크립트사용하면된다. 
여러사람 사용해서 협업할때 안정성을 보장하고 싶다면 뷰(웹기반만기존백단쓰면서 프론트만 얹겟다) 리액트(자유도좋음) 앵귤러(기업형적합) 등이 있다.
앞으로 배울거니 단점을 잘 알아두는게 좋다. 기업형은 직접쓰는 것보다 완충장치를 사용하자.

키를 이용한 데이터 관리 Map
exam["kor"]=30;으로 넣을 수도 잇다. 꺼낼때도 alert(exam["kor"]);
그럼 우선순위를 두고 특정상황에서 사용하자.
후자는 들어가는게 값, 문자열이다. exam을 변수로 꺼내 쓸때는 []을 사용해야한다.
변수선언이 var / let / const등이 있는데 사람마다 사용하는게 다르다.
var key = "eng"하고 싶다면 []안에 작성한걸 사용해야한다.
exam [key] 하면 70이 된다.
전자를 사용하다가 예외적으로 Map을 사용하자.

데이터를 관리할때 선형으로 관리하는데 List
Map형(Hash형) 으로 관리하는 상황도 있다.
자바스크립트가 Object가 Map을 지원하니 필요하다면 Map형이 있엇음을 떠올리면된다.
선형으로 꺼니고 싶다면 List를 사용하면된다.

9. JSON
다른 언어는 대입하는데 자바스크립트는 대입이라는게 존재하지 않는다.
객체로 박싱을 하고 그녀석을 참조하게 해야한다. 그래서 사소한 상수를 넣어도 박싱하는 과정이 필요하다.
너무 귀찮을 것임. 그래서 자바스크립트는 겉으로보기에는 편하게 작성한다.
이 표기법이 JSON이다.
var n = new Boolean(true); / var n = true; 후자로 표현하는데 내부적으로는 왼쪽이 된다.
자바스크립트는 문자와 문자열을 비교하지 않아서 '' ""사용하면된다.
""이 기본인데 근데 요즘에는 ''을 많이 사용한다. 왜일까? 자스는 문서내에 포함된다. 전체를 감싸는 ""을 사용하면 html이 사용하는 것과 충돌을 막기위해 ''을 사용하는 경우가 많다.
var ar[]; var ob {};
사진참조
var exam = {"kor":30, 'eng':70, "math":80}; object값을 초기화할때 이렇게 넣을 수잇다.
그래서 이 JSON은 편해서 다목적으로 이용된다. JSON으로 표시할 수없을때 원래 표기법을 사용하면된다.

JSON의 중첩된 데이터 구조도 쉽게 표현할 수 있다.
var notices = [
    {"id":1, "title":"hello json"},
    {"id":2, "title":"hi json"},
    {"id":3, "title":"json is"},
]
notices[1] 데이터꺼낼때 이렇게 꺼내면되서 범용적으로 사용되게 되었다.
처음에는 1, CSV형태로 만들엇다 이것이 너무 단순해서 좀 복잡하게 쓰기위해 태그가 만들어졋다
그런데 단순하면서 복잡한 데이터를 표현할 수 있는 JSON이 나타낫고 이것을 사용하게 되었다.
문자열 형태의 JSON어떻게 쓸것인가? 
외부에서 넘겨받은것을 가져오면 문자열이옴 '{"id":1, "title":"hello json"},'
이걸 어떻게 객체로 만들 수잇는지를 다음편에서 배우고자 한다.

10. eval 함수와 JSON 파싱하기
JSON이 모든 언어에서 포장하고 있다.
var data = '[
                    {"id":1, "title":"hello json"},
                    {"id":2, "title":"hi json"},
                    {"id":3, "title":"json is"},
                ]'
처음 데이터를 가져오면 ' '안에 문자열로 가져오게된다.
자바스크립트 es5에서는 한칸띄고 역슬래쉬하면 하나의 문자열로 묶이게 된다.
var data = '[ \
                    {"id":1, "title":"hello json"}, \
                    {"id":2, "title":"hi json"}, \
                    {"id":3, "title":"json is"} \
                ]';
원격에선 이렇게 문자열로 받을 수 밖에없다. 이상태에서  console.log(data[0].id);하면안나옴
이럴때 eval()을 사용할 수잇다.
eval('var x = 30;');
하면 var x = 30;이되고 console.log(x); 햇을때 값이 출력된다.
eval("var ar = " data + ";"); 받은 json을 문자열을 풀고 파싱을 하면서 배열에 담으면 값을 볼 수잇다.
console.log(ar[0].id);
eval은 범용적 도구이고 JSON만 파싱하는 것도 있다.

11. JSON 파서를 이용한 파싱
var data = {id:1, title:"aaa"} json을 만들어보자.
이전엔 object의 키를 "id"로 담앗는데 자스가 묵시적으로 문자열로 봐서 안해도된다.
var data = {id:1, "title":"aaa"} 그런데 무조건 써야하는 경우가 있다. 유효하지 않은 변수객체를 가진경우가 있다.
"n id"같이 유효하지 않을경우 꺼내사용할땐 data["n id"]로 꺼내써야함.
그래서 키를 문자열로 표기해도되고 안해도된다. 안하는게 편하니 쓰지말자.
만약 이게 문자열이 올경우 문제가 발생한다.
var data = JSON.parse('{id:1, title:"aaa"}');
안의 문자열이 JSON문법에 맞다면 JSON으로 읽어준다. 그런데 에러가 발생함
why? json parser는 깐깐하게 문법을 본다.
var data = JSON.parse('{"id":1, "title":"aaa"}'); 그래서 키값을 문자열로 해줘야한다.
파싱할때 ""을 담는 것을 주의하자. 파서사용한하면 그냥 써도된다.
var data2 = JSON.parse('{id:1, title:"aaa"}');
문제는 이 데이터를 json문자열로 바꿔야하는 경우가 있다.
var json = JSON.stringify(data2); data2가 문자열로 바뀐다.
사진참조
알아서 {"id":1, "title":"aaa"} "" 도 넣어준다.
JSON 파서를 사용하거나 이것을 담을 일이 많다. 이 도구를 잘 기억해둘 필요가 있다.

12. 자바스크립트 연산자
데이터는 특이점이 잇어서 설명이 오래걸렷다.
연산자는 다른 것과 비슷하다.
기본값 숫자:12 / 문자열 : "HELLO"
산술연산자 : +, -, *, / ,%
비교연산자 : < , > ,<= , >=, ==, != , === , !==
관계연산자 &&, ||

12.1 === 와 !== 연산자
var x = 3; 3을 넣는 박스가 만들어지고 이 박스를 참조하는 x변수가 생긴다.
이 박스가 x이고 3이라는 객체를 참조하고 있다.
var y = 3; 하면 새로운 박스 y가 만들어지고 3을 갖는다.
x가참조하고 있는 값이 같은지 박스가 같은지 연산이 필요하다.

출력도구가 3가지가 있는데 바꾸면서 사용해보자.
console.log(); 콘솔 로그
alert(); 경고창
document.write(); 문서에 작성해주기
var x = 3;
var y = 3;
일 때
x == y 값을 비교하는 것이고 x === y 는 주소를 비교하는 것이다.
자바에서 번지비교하는 거랑 비슷한듯.
-> true true나온다. 주소가 달라야하지만 근데 주소도 같다. why?
상수를 만드는데 값이 똑같으면 똑같은 박스를 만들어야하는데 그렇지 않고 자바스크립트는 이름만 하나 더 붙인다.
그러면 다른 박스를 만들고 싶다면? var y = new Nunber(3);해서 새객체를 만들어줘야한다.
document.write(x === y); false가 나온다.

연산할때 3 + "4" 하면 묵시적으로 형태를 맞춰줘서 34가된다. 덧셈은 정수가 문자열이된다.
3.5-"2" 하면 1.5가된다 why? 1.5가된다. 빼기는 문자열이 실수가 되버림
이런 묵시적인 변환을 기억해주자.  32 > "4" = true 정수되버림.

복합 대입연산자 +=, -=, /=
증가/증감 연산자 ++, --
삼항연산자 ?:
연산제어()
모두사용가능함. 자바스크립트 연산자를 찾아보고 모르면 알아보자.
https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Expressions_and_Operators
모질라에서 보자.

13. 자바스크립트 제어구조
조건문 if, while, do-while
반복문 while, for, for-in
선택문 else, else if, switch

for-in문은 컬렉션을 순환하는 것이다. 다른 문의 foreach문과 비슷하지만 다르다.
일반적 for문은 그냥 사용하면된다.
var ar = ["철수,'영희","맹구"]
       
for(var i = 0; i <ar.length; i++ ){
    document.write(ar[i]+"<br/>")
}

보통의 foreach문은 for(var d in ar) document.write(d+"<br/>")이런식으로 ar에서 값을 꺼내 담아야할 것같다.
하지만 for in문은 사용안한다. 키니가 그냥 index로 하고 꺼낼때는 똑같다.
for(var i in ar){
    document.write(ar[i]+"<br/>")
}
그럼 왜 값을 꺼내면 되지 굳이 인덱스를 꺼내게 햇나? 그냥 객체를 순회할때도 쓰게 하기 위해서 나누지 않기 위해 만든듯 하다.
var ob = {id:1, title:"hello", writeId:"newlec"}

for(var i in ar)
    document.write(ob[i]+"<br/>")
대상은 달라졋지만 사용법이 같다. 배열이나 object를 꺼낼때 통일감있게 하기 위해 만든 듯하다.
다른 것은 사용법이 같다. 더 궁금하면 모질라가서 Reference보자.

14. 함수 객체와 표현식
함수? 대입? 객체?
int add(int x, int y){
    return x+y;
}
보통 함수를 정의 해놓고 나중에 사용한다.
자바스크립트는 함수를 정의하지않는데 함수를 만든다. 
new Function("x, y","return x+y;"); 함수객체를 만들고 첫번째 문자열이 매개변수(인자)이고 두번째 문자열이 구현부분이다.
이렇게 만들고 사용하려면 이름을 붙여주면된다. var add = new Function("x, y","return x+y;");
사용할때는 add(3,4);일반 사용방법과 같다.
자바스크립트는 객체이기때문에 정의와 달리 대입할 수 있다는 것이다.
그냥 인자로 로직을 전달하면 다른데서도 사용할 수 있다.
일반적인 수학에서 사용했던 것으로 표현할 수도 있다.
var add = function(x,y){
    return x+y;
}; 하면 내부적으로객체를 만들어준다.
이것 조차 어려우면 일반적인 방식을 할 수도 있다.
function add (x , y){
    return x + y;
}
이 세가지 중에서 가장 많이 사용되는 것은 2번째이다.

15. 함수의 가변 인자 arguments 콜렉션
함수를 정의하는 방법을 알았는데 매개변수를 갯수에 맞게 작성하면된다.
그런데 많은 매개값을 전달하면?
var sum = add(2,3, "hello",3,4,5,6,7,87);
이러면 에러가 나야할 것 같은데 나지 않는다.
특이하게도 매개변수는 의미가 없다. 매개변수는 값을 받는 역할을 하지 않고 참조하는 이름일뿐임.
참조하는 x,y가 잇을뿐이다.
내부적으로는 가변적으로 arguments객체에 차곡차곡 쌓아준다.
 var add = function(x,y){
    alert(arguments.length);
    return x+y;
} ;
var sum = add(2,3, "hello",3,4,5,6,7,87);
하면 전달된 값들이 몇갠지 알수 잇다.
사진참조
arguments[0]인자도 뽑아볼 수있다. 0번째에 대한 인자인데 
x, y는 arguments컬렉션에 담아지는 인자인데 이름이 추가적으로 붙어지는 것 뿐이다.
실제사용할때는 arguments[0] + arguments[1]한것과 마찬가지임.
함수는 인자의 갯수 정의가 분명하지 않다. 가변길이 일때 arguments에서 찾을 수잇다.

16. 변수의 가시영역과 global 객체 그리고 전역변수
https://youtu.be/QD8kpRPAyng
자바스크립트는 자유성, 유연성때문에 기존의 언어와 다른점이 많다.
var a = 1; var선언 변수는 정적인 방식으로 생성한다.
alert(a); 순서 바꾸면 undifined로 나옴.
이 지역내에서 alert(a); 하면 모든 변수가 선언되기 위해서 먼저 올라간것임.
선언하지 않고 a=1하면 전역객체의 속성이 된다. 윈도우 객체에 a가 붙은거임.
순서를 바꾸면 당연히 a라는 변수가 선언된적이 없어서 안된다.
Uncaught ReferenceError: a is not defined at index.html:12:15
변수를 선언하지 않고 사용할 수 있다고 해도 전역객체에 속성을 붙이는 것이다.
a = 1;  == window.a = 1;이다.
var a = 3;까지잇다면?
a++; 하면 지역변수가 먼저 사용된다. 

var a = 1;
var a = 2;
하면? 다른 언어는 에러이다. alert(a); 나중에 한게 사용됨.
중괄호를 사용하면? 지역화도 불가능하다. <script>안에서는 중괄호가 변수 영역을 나누지 않는다.
그러면 지역변수 개념이 없나? 유일하게 사용되는것은 함수안에 선언된 변수이다.
function f1(){
    var a= 1; 
}
을 사용하면 흐름이끝난후 변수가 사용되고 없어진다. 
어떤 변수인지 알 수있도록 규모가 커질수록 복잡도가 복잡해질수록 var을 붙이거나 전역변수로 사용하거나 구분을 잘하자.
function f1(){
    a= 1; 
}
alert(a);'
f1(); 하면 오류발생 전역변수가 잇어도 호출을 뒤에서하니 전역변수가 없는 것임.
function f1(){
    a= 1; 
}
function f2(){
    alert(a); 
}
f1();
f2();
자바스크립트는 함수안에 함수가 선언가능해서 또 문제가 많이 발생한다.
전역변수를 먼저 써버리면 밑에서 문을 닫지 못해서 문제가 생길 수 있다.

17. 클로저(Closure)
https://youtu.be/Q0iNAxzgSbI
함수를 객체로 만들어서 함수가 함수를 반환하거나 함수안에서 함수가 만들어질때 문제가 발생할 수 잇다.
function f1(){
    var a= 1; //지역변수

    return function f2(){
        return a;
    }
}

var f = f1();
var a = f();
alert(a);

f1을 호출해서 반환받는게 f2()라는 함수 객체임. 함수가 반환되니 함수처럼 사용할 수 있다.
var a가 지역변수 엿기때문에 f1은 호출되엇을때 var을 없애야하는데 닫을지 안닫을지 고민하게됨 f2가 호출되수잇으니 자원을 못닫음.
그래서 var a가 계속 켜있는 상태가 된다. f2를 호출해야 그제서야 없어질수있다. 그래서 이객체를 Closure라고 한다.
이 Closure로 자원이 묶일 수 잇는데 일부러 만드는지와 모르고 묶는게 다르니 잘 이용해야한다.

사용하는것은 문제가 안되는데 잘못알고 사용하면 안된다.
Closure를 어렵게 생각하지 말고 내가 남을 닫을 수잇는 키를 가지고 있다고 생각해보자.

언어의 기본은 알게 되엇다.

18. window 플랫폼을 이용한 대화 parseInt, alert, prompt, confirm

















자바를 배우면서 JSON을 배웟는데 그 원리와 파싱의 원리를 배우게 되어서 좋다.
백엔드를 주로 할것이라 사용법만 배워도 물론 사용은 할 수 있겟지만 원리를 알면 더 잘 사용할 수 있을 것 같다.











